import java.util.Arrays;

class Person {
	int age;
	boolean gender;// false --> male, true --> female

	Person(int age, boolean gender) {
		this.age = age;
		this.gender = gender;
	}
}

public class Assignment2 {
	// Assignment

	/**
	 * Write a Computer program to find the type of a person and print the type.
	 * Infant : If the age is less than 1 year Toddler : If the age is less than
	 * 3 and greater than 1 Pre Schooler : If the age is less than 5 and greater
	 * than 3 KG Girl : If the age is greater than 5 and less than 6 and the
	 * gender is female KG Boy : If the age is greater than 5 and less than 6
	 * and the gender is male
	 */
	public void personType(Person person) {
		System.out.print("Input person object details: ");
		System.out.print("{Person.age = " + person.age);
		System.out.println(", Person.gender = " + person.gender+ "}");

		if (person.age >0 && person.age<= 1){
			System.out.println("Infant");
		}
		else if (person.age > 1 && person.age <= 3){
			System.out.println("Toddler");
		}
		else if (person.age > 3 && person.age <= 5){
			System.out.println("Pre Schooler");
		}
		else if (person.age > 5 && person.age <= 6 ){
			if (person.gender){
				System.out.println("KG Girl");
			}
			else {
				System.out.println("KG Boy");
			}
		}
		else{
			System.out.println("Invalid Argument");
		}

		System.out.println("--------------------------------------------------------");
	}

	/**
	 * Given an integer N as input, check the following: If N is odd, print
	 * "Weird". If N is even and, in between the range of 2 and 5(inclusive),
	 * print "Not Weird". If N is even and, in between the range of 6 and
	 * 20(inclusive), print "Weird". If N is even and N>20, print "Not Weird".
	 */
	public void weirdNumber(int n) {

		if(n<=0){
			System.out.println("Invalid Argument.Enter a non zero positive number.");
		}

		if (n%2 == 0 ){
			if(n>=2 && n<=5){
				System.out.println("Not Weird");
			}
			else if(n>=6 && n<=20){
				System.out.println("Weird");
			}
			else if(n>20){
				System.out.println("Not Weird");
			}
		}
		else{
			System.out.println("Weird");
		}
	}

	/**	 
	 * Write a method to determine whether a number is prime
	 */
	public void isPrime(int n) {
		if (n <= 1){
			System.out.println(" Invalid Argument");
			return;
		}
		if (n == 2){
			System.out.println(" Nnumber is Prime");
			return;
		}

		for(int i=2; i<n ; i++){
			if(n%i == 0){
				System.out.println(" Number is Not Prime");
				return;
			}
		}
		System.out.println(" Number is Prime");

	}

	/**
	 * Find N fibonacci numbers fibonacci Number: f(N) = f(N-1)+f(N-2).
	 * Typically, f(0)=f(1)=1.
	 */
	public int[] fibonacciNumber(int n) {

		int[] f = new int[n+1];
		if (n < 0){
			throw new ArrayIndexOutOfBoundsException("Enter non-negative number input");
		}

		if (n == 0) {
			f[0] = 1;
			return f;
		}
		if (n ==1) {
			f[1] = 1;
			return f;
		}

		f[0] = f[1] = 1;
		if( n >= 2) {
			for (int x = 2; x < n+1; x++) {
				f[x] = f[x-1] + f[x - 2];
			}
		}
		return f;
	}


	/**
	 * Write a function that takes a string as input and returns the string
	 * reversed. Given s = "hello", return "olleh".
	 */
	public String reverseString(String s) {
		if (s == null) {
			throw new IllegalArgumentException("Enter a non-null input");
		}
		String rev = "";
		int len = s.length();
		for (int i = len - 1; i >= 0; i--) {
			rev = rev + s.charAt(i);
		}
		return rev;
	}

	/**
	 * Given an array of nums, write a function to find the largest two integer.
	 */        
	public int[] findTheLargestTwo(int[] nums) {
		int small;
		int big;
		if (nums[1] >= nums[0]) {
			big = nums[1];
			small = nums[0];
		}
		else {
			big = nums[0];
			small = nums[1];
		}
		for (int i=2; i<nums.length;i++) {
			if (nums[i] > big) {
				big = nums[i];
			}
			else if (nums[i] > small) {
				small = nums[i];
			}
		}
		return new int[] {big, small};
	}

	/**
	 * Given an array nums, write a function to move all 0's to the end of it
	 * while maintaining the relative order of the non-zero elements. For
	 * example, given nums = [0, 1, 0, 3, 12], after calling your function, nums
	 * should be [1, 3, 12, 0, 0].
	 */
	public void moveZeroes(int[] nums) {

		int i = 0;
		int x;
		while (i < nums.length) {
			//find index of element with val 0
			while(i < nums.length && nums[i] != 0 ){
				i++;

			}
			if(i == nums.length){
				return; //there is no zero value element so no swapping required
			}
			x = i++;

			while(i < nums.length && nums[i] == 0){
				i++;
			}
			if(i == nums.length){
				return; //all the trailing elements are  zero value  so no swapping required
			}
			int y =i;

			int temp = nums[x];
			nums[x]=nums[y];
			nums[y]=temp;
			i = x++;
		}
	}


	// Bonus
	/**
	 * Given a non-negative integer n, repeatedly add all its digits until the
	 * result has only one digit. For example: Given n = 38, the process is
	 * like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.
	 */
	public int addDigits(int n) {
		int result = 0;

		if (n < 0) {
			throw new IllegalArgumentException("Enter a positive integer");
		}

		if (n >= 0 && n < 10) {
			result = n;
			return result;
		}

		while (n > 0) {
			result = result + n % 10;
			n = n / 10;
			if (n / 10 == 0 && result / 10 != 0) {
				result = result + n;
				n = result;
				result = 0;
			}

		}
		return result;

	}

	/**
	 * Write a program to check whether a given number is an ugly number. Ugly
	 * numbers are positive numbers whose prime factors only include 2, 3, 5.
	 * For example, 6, 8 are ugly, while 14 is not ugly since it includes
	 * another prime factor 7. Note that 1 is typically treated as an ugly
	 * number.
	 */
	public boolean isUgly(int n) {
		Assignment2 uglyNum = new Assignment2();
		for (int i = 2; i <= n; i++) {
			if (n % i == 0) {
				if (uglyNum.isPrimeUgly(i)) {
					if (i != 2 && i != 3 && i != 5) {
						// System.out.println(n + " is Not Ugly Number ");
						return false;
					}
				}
			}
		}
		// System.out.println(n + " is Ugly Number ");
		return true;
	}

	private boolean isPrimeUgly(int n) {
		if (n <= 1) {
			throw new IllegalArgumentException("Invalid Argument");

		}
		if (n == 2) {
			return true;
		}

		for (int i = 2; i < n; i++) {
			if (n % i == 0) {
				return false;
			}
		}
		return true;
	}

	public static void main(String[] args) {

		Assignment2 assignment2 = new Assignment2();

		//Test cases for method personType
		System.out.println("==================================");
		System.out.println("Test cases for method personType");
		System.out.println("==================================");
		Person p0 = new Person(1,false);
		Person p1 = new Person(3,false);
		Person p4 = new Person(5,true);
		Person p2 = new Person(6,true);
		Person p3 = new Person(6,false);
		Person p5 = new Person(8,true);
		Person p6 = new Person(-1,true);
		Person p7 = new Person(0,false);
		Person p8 = new Person(86,true);

		assignment2.personType(p0);
		assignment2.personType(p1);
		assignment2.personType(p2);
		assignment2.personType(p3);
		assignment2.personType(p4);
		assignment2.personType(p5);
		assignment2.personType(p6);
		assignment2.personType(p7);
		assignment2.personType(p8);

		//Test cases for method weirdNumber
		System.out.println("==================================");
		System.out.println("Test cases for method weirdNumber");
		System.out.println("==================================");

		int [] listOddEven = {2,4,5,6,7,8,20,21,24,53,0,-2};
		for (int i = 0; i < listOddEven.length; i++) {
			System.out.print("Input: " + listOddEven[i] + "\nOutput: ");
			assignment2.weirdNumber(listOddEven[i]);
			System.out.println("---------------------------------------------");
		}

		//Test cases for method isPrime
		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method isPrime");
		System.out.println("=======================================");

		int [] primeList = {9,53,0,-1,1,9,43, 47, 53, 59, 61, 67, 71, 73, 103,947, 953, 967, 971,1000,-1000};
		for (int i = 0; i < primeList.length; i++) {
			System.out.print(primeList[i]);
			assignment2.isPrime(primeList[i]);
			System.out.println("---------------------------------------------");
		}

		//Test cases for method fibonacciNumber
		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method fibonacciNumber");
		System.out.println("=======================================");

		int [] listFibonacci = {0,1,2,23,12,30};
		for (int i = 0; i < listFibonacci.length; i++) {
			int[] result = assignment2.fibonacciNumber(listFibonacci[i]);

			System.out.println("The fibonacci Series for f(" + listFibonacci[i] + ")" );
			System.out.println(Arrays.toString(result));
			System.out.println("-----------------------------------------------------------------------");
		}

		//Test cases for method reverseString
		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method reverseString");
		System.out.println("=======================================");

		String[] listStrRev = {"Hello", "", "Hel lo", "Hello! How are you?", "12345"};
		for (int i = 0; i < listStrRev.length; i++) {
			System.out.println("Initial String: " + listStrRev[i]);
			System.out.println("Reversed String: " + assignment2.reverseString(listStrRev[i]));
			System.out.println("---------------------------------------------");
		}

		//Test cases for method findTheLargestTwo
		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method findTheLargestTwo");
		System.out.println("=======================================");

		System.out.println(Arrays.toString(assignment2.findTheLargestTwo(new int[] {20, 80, 19, 80})));
		System.out.println(Arrays.toString(assignment2.findTheLargestTwo(new int[] {-20, -10, -10, -10})));
		System.out.println(Arrays.toString(assignment2.findTheLargestTwo(new int[] {-2, 1, 0})));
		System.out.println(Arrays.toString(assignment2.findTheLargestTwo(new int[] {1,0})));
		System.out.println("---------------------------------------------");


		//Test cases for method moveZeroes
		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method moveZeroes");
		System.out.println("=======================================");

		int[] num = {0,1,4,0,0,9,8,0, 9,0,0};
		int[] num1 = {13,10,23,0,4,0,0,0,9,80};
		int[] num2 = {0,00,000,0,3,56,12,1};
		assignment2.moveZeroes(num);
		assignment2.moveZeroes(num1);
		assignment2.moveZeroes(num2);
		System.out.println(Arrays.toString(num));
		System.out.println(Arrays.toString(num1));
		System.out.println(Arrays.toString(num2));

		// Bonus Question Test cases for method addDigits
		System.out.println("");
		System.out.println("==============================================");
		System.out.println("Bonus Question Test cases for method addDigits");
		System.out.println("==============================================");

		int[] addDigitsList = {29998,1,0,7896};
		for (int i = 0; i < addDigitsList.length; i++) {
			System.out.print("The sum of digits for number " + addDigitsList[i] + " is: ");
			System.out.println(assignment2.addDigits(addDigitsList[i])) ;
			System.out.println("---------------------------------------------");
		}

		//Bonus Question Test cases for method isUgly
		System.out.println("");
		System.out.println("============================================");
		System.out.println("Bonus Question Test cases for method isUgly");
		System.out.println("=============================================");

		int[] uglyCheckList = {17,52,14,7,4,35};
		for (int i = 0; i < uglyCheckList.length; i++) {
			System.out.println("Input: " + uglyCheckList[i]+ "  Result: " + assignment2.isUgly(uglyCheckList[i])) ;
			System.out.println("---------------------------------------------");
		}
	}
}