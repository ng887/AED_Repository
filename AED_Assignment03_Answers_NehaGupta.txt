import java.util.Arrays;

public class Assignment3 {
	// assignments
	/**
	 * Write a method to find N numbers which are power of three. e.g. n=4,
	 * return {1,3,9,27}
	 */
	public int[] findPowerOfThree(int n) {
		if (n <=0 ){
			return null;			
		}
		int[] num = new int[n];
		num[0] = 1;
		for(int i = 1; i < n ; i++){
			num[i] = num[i-1] * 3;
		}
		return num;
	}

	/**
	 * Given a integer 'n', return n%count, count is the number of digits of n
	 * For example, n = 100, return 1
	 */
	public int countDigits(int n) {
		int count = 0;
		int num = n;
		if(num <= 0){
			return -1;
		}
		while (num > 0){
			num=num/10;
			count ++;
		}
		int result = (n % count);
		return result;
	}

	/**
	 * Given a integer 'n', if n is odd, print n odd numbers, if n is even,
	 * print n even numbers. For example, n = 3, print 1 3 5 n = 4, print 0 2 4
	 * 6
	 */
	public void printNumbers(int n) {
		if(n%2 == 0 ){
			for(int i =0; i <n; i++){
				System.out.print(i*2 + " ");
			}
		}
		else {
			for(int i =1; i <n+1; i++){
				System.out.print(((i*2)-1) + " ");
			}
		}

	}

	/**
	 * Given numRows, generate the first numRows of Pascal's triangle. For
	 * example, given numRows = 5, return: [1] [1,1] [1,2,1] [1,3,3,1]
	 * [1,4,6,4,1]
	 */
	public int[][] generatePascalsTriangle(int n) {
		int[][] a = new int[n][];
		for (int i =0 ; i <n ;i++){
			a[i] = new int[i+1];
			for(int j=0; j< i+1; j++){
				if (j==0){
					a[i][j] = 1;
				}
				else if(i==j){
					a[i][j]=1;
				}
				else{
					a[i][j] = a[i-1][j-1] + a[i-1][j];
				}
			}
		}

		return a;
	}

	public static void print(int[ ][ ] triangle){
		for(int i=0; i< triangle.length; i++){
			for(int j=0; j<triangle[i].length; j++){

				System.out.print(triangle[i][j] + " ");
			}

			System.out.println();
		}
	}
	/**
	 * Write a function that takes a string as input and reverse only the vowels
	 * of a string. For example: Given s = "hello", return "holle".
	 */
	public String reverseVowels(String s) {
		char[] input = s.toCharArray();

		int left = 0;
		int right = input.length -1;

		while  (left <= right) {
			// find vowel from left 
			while(!IsVowel(input[left]) && left < right) {
				left++;
			}   	

			// find vowel from right side
			while (!IsVowel(input[right]) && right > left) {
				right--;
			}


			// swap both
			char temp = input[left];
			input[left] = input[right];
			input[right] = temp;
			left++;
			right--;
		}
		return new String(input);
	}

	private boolean IsVowel(char c) {
		// TODO Auto-generated method stub
		return (c == 'a' || c == 'A' || 
				c == 'e' || c == 'E' || 
				c == 'i' || c == 'I' || 
				c == 'o' || c == 'O' ||
				c == 'u' || c == 'U');
	}

	/**
	 * Given a string s consists of upper/lower-case alphabets and empty space
	 * characters ' ', return the length of last word in the string. If the last
	 * word does not exist, return 0. Note: A word is defined as a character
	 * sequence consists of non-space characters only.
	 */
	public int lengthOfLastWord(String str) {

		char[] input = str.toCharArray();
		int end = input.length - 1;
		while ((end >= 0) && !(input[end] == ' ') ){
			end--;
		} 
		int pos = end+1;

		return (input.length - pos);
	}

	/**
	 * Reverse a string by words. Do not use 'split' function. e.g. "I like
	 * soccer" --> "soccer like I"
	 */
	public String reverseString2(String str) {

		char[] input = str.toCharArray();
		String result= "";
		int pos = input.length - 1;
		int end = input.length - 1;
		while ((pos >= 0)){
			while((pos >= 0)&& (input[pos] != ' ') ){
				pos--;
			} 
			int start = pos+1;
			for (int i = start ; i <= end ; i++){
				result = result + input[i];
			}
			if (pos >= 0)
				result = result + " ";
			pos= pos -1;
			end = pos ;
		}


		return result;
	}

	// Bonus
	/**
	 * A robot from Mars send a long message to Earth which only contains many
	 * "SOS", like "SOSSOS", "SOSSOSSOSSOSSOS" But the radiation from universe
	 * changed some characters of the massage. Write a method to count how many
	 * characters were changed. For example, "SOSSOSSOS" might be changed to
	 * "SOSSUSSOP", then your method should return 2. The message was consisted
	 * by "SOS" so its length will be multiple of 3. You could assume the
	 * message only contains upper letter.
	 */
	public int checkMessage(String message) {

		char[] input = message.toCharArray();

		if (message.length()%3 ==0){
			int count=0;
			for (int i = 0 ; i <message.length(); i=i+3){
				if(input[i] != 'S')
				{
					count++;
				}
				if(input[i+1] != 'O')
				{
					count++;
				}
				if(input[i+2] != 'S')
				{
					count++;
				}

			}
			return count;
		}
		return -1;
	}

	public static void main(String[] args) {
		Assignment3 a3 = new Assignment3();

		//Test Case for printNumbers

		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method printNumbers");
		System.out.println("=======================================");

		System.out.println("3 odd numbers"); a3.printNumbers(3); System.out.println("");
		System.out.println("4 even numbers");a3.printNumbers(4);System.out.println("");
		System.out.println("9 odd numbers"); a3.printNumbers(9); System.out.println("");


		//Test Case for generatePascalsTriangle

		System.out.println("");
		System.out.println("=======================================");
		System.out.println("Test cases for method generatePascalsTriangle");
		System.out.println("=======================================");
		int [] pascalList = {3,9,5};
		for (int i = 0; i < pascalList.length; i++) {
			int [][] result =a3.generatePascalsTriangle(pascalList[i]);
			for (int y=0; y<result.length;y++) {
				System.out.println(Arrays.toString(result[y]));
				
			}
			System.out.println("===================================");
		}

		System.out.println("Rest of the Test cases are in Assignment3Testing.java");

	}
}

