Ans 01:
	public int longestPalindrome(String s){
		int maxLength = 0;
		for (int curr = 0; curr < s.length() ; curr++ ){
			int left = curr;
			int right = curr;
			int currentLength = 1;
			while(left >= 0 && right < s.length()){
				if (s.charAt(left)== s.charAt(right) && (left != right)){
					currentLength += 2;
				}
				left --;
				right++;
			}
			maxLength = Math.max(maxLength, currentLength);
		}
		return maxLength;
	}

//	solution to the second question?
//	-10;

Ans 03:
	public int titleToNumber(String title) {

		int size = title.length();
		title = title.toUpperCase();

		char[] titleChar = title.toCharArray();
		int result=0;
		int i = 0;
		while ( i < size){
			for(int j = size-1 ; j >= 0 ; j--){
				result = result + (int)Math.pow(26, j) * ((int) titleChar[i]-64) ;
				i=i+1;
			}

		}
		return result;
	}

Bonus Que with o(n)  time complexity

	public int twoSum(int[] nums,int target){
		HashMap <Integer,Boolean> map = new HashMap<Integer,Boolean>();
		int counter = 0;
		for (int i = 0 ; i <nums.length ; i++){
			map.put(nums[i], false);
		}

		for (int i = 0 ; i <nums.length ; i++){
			if (map.containsKey(target-nums[i]) && map.get(nums[i])== false ){
				counter = counter +1;
				map.put(target-nums[i],true);
			}
		}

		return counter;
	}
//	Given int[] nums = {4} and target = 8, the return should be 0 and your return is 1;
//	-2;
